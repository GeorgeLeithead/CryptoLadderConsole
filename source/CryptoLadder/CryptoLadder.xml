<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CryptoLadder</name>
    </assembly>
    <members>
        <member name="T:CryptoLadder.Api.BaseApi">
            <summary>Base API class</summary>
        </member>
        <member name="F:CryptoLadder.Api.BaseApi._exceptionFactory">
            <summary>Exception factory</summary>
        </member>
        <member name="F:CryptoLadder.Api.BaseApi.localVarFileParams">
            <summary>Local file parameters.</summary>
        </member>
        <member name="F:CryptoLadder.Api.BaseApi.localVarPathParams">
            <summary>Local path parameters.</summary>
        </member>
        <member name="F:CryptoLadder.Api.BaseApi.localVarHttpContentType">
            <summary>The Content-Type header</summary>
        </member>
        <member name="M:CryptoLadder.Api.BaseApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CryptoLadder.Api.BaseApi"/> class.
            </summary>
        </member>
        <member name="M:CryptoLadder.Api.BaseApi.#ctor(CryptoLadder.Client.Configuration)">
            <summary>Initializes a new instance of the <see cref="T:CryptoLadder.Api.BaseApi"/> class using Configuration object</summary>
            <param name="configuration">An instance of Configuration</param>
        </member>
        <member name="M:CryptoLadder.Api.BaseApi.GetBasePath">
            <summary>Gets the base path of the API client.</summary>
            <value>The base path</value>
        </member>
        <member name="P:CryptoLadder.Api.BaseApi.Configuration">
            <summary>Gets or sets the configuration object</summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:CryptoLadder.Api.BaseApi.ExceptionFactory">
            <summary>Provides a factory method hook for the creation of exceptions.</summary>
        </member>
        <member name="M:CryptoLadder.Api.BaseApi.CallApi(System.String,RestSharp.Method,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Makes the HTTP request (Sync).</summary>
            <param name="path">URL path.</param>
            <param name="method">HTTP method.</param>
            <param name="queryParams">Query parameters.</param>
            <param name="formParams">Form parameters.</param>
            <param name="headerParams">Header parameters.</param>
            <returns>IRestResponse object</returns>
        </member>
        <member name="M:CryptoLadder.Api.BaseApi.CallApiAsync(System.String,RestSharp.Method,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Makes the asynchronous HTTP request.</summary>
            <param name="path">URL path.</param>
            <param name="method">HTTP method.</param>
            <param name="queryParams">Query parameters.</param>
            <param name="formParams">Form parameters.</param>
            <param name="headerParams">Header parameters.</param>
            <returns>The Task instance IRestResponse object</returns>
        </member>
        <member name="T:CryptoLadder.Api.Interfaces.IApiAccessor">
            <summary>Represents configuration aspects required to interact with the API endpoints.</summary>
        </member>
        <member name="P:CryptoLadder.Api.Interfaces.IApiAccessor.Configuration">
            <summary>Gets or sets the configuration object.</summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="M:CryptoLadder.Api.Interfaces.IApiAccessor.GetBasePath">
            <summary>Gets the base path of the API client.</summary>
            <value>The base path</value>
        </member>
        <member name="P:CryptoLadder.Api.Interfaces.IApiAccessor.ExceptionFactory">
            <summary>Provides a factory method hook for the creation of exceptions.</summary>
        </member>
        <member name="T:CryptoLadder.Api.Interfaces.IBaseApi">
            <summary>Base API class</summary>
        </member>
        <member name="P:CryptoLadder.Api.Interfaces.IBaseApi.Configuration">
            <summary>Gets or sets the configuration object.</summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:CryptoLadder.Api.Interfaces.IBaseApi.ExceptionFactory">
            <summary>Provides a factory method hook for the creation of exceptions.</summary>
        </member>
        <member name="M:CryptoLadder.Api.Interfaces.IBaseApi.GetBasePath">
            <summary>Gets the base path of the API client.</summary>
            <value>The base path</value>
        </member>
        <member name="T:CryptoLadder.Api.KeyInfo">
            <summary>Get user API key information class.</summary>
        </member>
        <member name="F:CryptoLadder.Api.KeyInfo.path">
            <summary>API path</summary>
        </member>
        <member name="F:CryptoLadder.Api.KeyInfo.queryParams">
            <summary>API query parameters.</summary>
        </member>
        <member name="F:CryptoLadder.Api.KeyInfo.headerParams">
            <summary>The Accept header</summary>
        </member>
        <member name="M:CryptoLadder.Api.KeyInfo.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:CryptoLadder.Api.KeyInfo"/> class.</summary>
        </member>
        <member name="M:CryptoLadder.Api.KeyInfo.#ctor(CryptoLadder.Client.Configuration)">
            <summary>Initializes a new instance of the <see cref="T:CryptoLadder.Api.KeyInfo"/> class using Configuration object.</summary>
            <param name="configuration">An instance of Configuration</param>
        </member>
        <member name="M:CryptoLadder.Api.KeyInfo.ApiConfiguration">
            <summary>Configure the API parameters.</summary>
        </member>
        <member name="M:CryptoLadder.Api.KeyInfo.CallApi">
            <summary>Makes the HTTP request (Sync).</summary>
            <returns><see cref="T:CryptoLadder.Model.APIKeyInfo"/> object.</returns>
        </member>
        <member name="M:CryptoLadder.Api.KeyInfo.CallApiAsync">
            <summary>Makes the HTTP request (Async).</summary>
            <returns><see cref="T:CryptoLadder.Model.APIKeyInfo"/> object.</returns>
        </member>
        <member name="M:CryptoLadder.Api.KeyInfo.ProcessRestResponce(RestSharp.IRestResponse)">
            <summary>Process the JSON rest response.</summary>
            <param name="localVarResponse">JSON rest response.</param>
            <returns><see cref="T:CryptoLadder.Client.ApiResponse`1"/> object.</returns>
        </member>
        <member name="T:CryptoLadder.Api.OrderCreate">
            <summary>Create active order class.</summary>
        </member>
        <member name="F:CryptoLadder.Api.OrderCreate.path">
            <summary>API path</summary>
        </member>
        <member name="F:CryptoLadder.Api.OrderCreate.queryParams">
            <summary>API query parameters.</summary>
        </member>
        <member name="F:CryptoLadder.Api.OrderCreate.headerParams">
            <summary>The Accept header</summary>
        </member>
        <member name="M:CryptoLadder.Api.OrderCreate.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:CryptoLadder.Api.OrderCreate"/> class.</summary>
        </member>
        <member name="M:CryptoLadder.Api.OrderCreate.#ctor(CryptoLadder.Client.Configuration)">
            <summary>Initializes a new instance of the <see cref="T:CryptoLadder.Api.OrderCreate"/> class using Configuration object.</summary>
            <param name="configuration">An instance of Configuration</param>
        </member>
        <member name="M:CryptoLadder.Api.OrderCreate.ApiConfiguration">
            <summary>Configure the API parameters.</summary>
        </member>
        <member name="M:CryptoLadder.Api.OrderCreate.CallApi(CryptoLadder.Definitions.SideEnum,CryptoLadder.Definitions.SymbolEnum,CryptoLadder.Definitions.OrderTypeEnum,CryptoLadder.Definitions.TimeInForceEnum,System.Decimal,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String)">
            <summary>Makes the HTTP request (Sync).</summary>
            <param name="side">Order side</param>
            <param name="symbol">Currency symbol for order</param>
            <param name="orderType">Order type</param>
            <param name="timeInForce">Time in force for order</param>
            <param name="qty">Order quantity of perpetual contracts to buy or sell</param>
            <param name="price">Order price of perpetual contracts to buy or sell.</param>
            <param name="takeProfit">Order take profit (TP) price</param>
            <param name="stopLoss">Order stop loss (SL) price </param>
            <param name="reduceOnly">Reduce only</param>
            <param name="closeOnTrigger">Closing trigger.  When creating a closing order, it is highly recommended to set as true to avoid failing by insufficient available margin.</param>
            <param name="orderLinkId">Custom order identifier.</param>
            <param name="trailingStop">Order trailing stop (TS) units.</param>
            <remarks>As of 20190117 ByBit only support order quantity in an integer.</remarks>
            <returns><see cref="T:CryptoLadder.Model.OrderResBase"/> object.</returns>
        </member>
        <member name="M:CryptoLadder.Api.OrderCreate.CallApiAsync(CryptoLadder.Definitions.SideEnum,CryptoLadder.Definitions.SymbolEnum,CryptoLadder.Definitions.OrderTypeEnum,CryptoLadder.Definitions.TimeInForceEnum,System.Decimal,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String)">
            <summary>Makes the HTTP request (Async).</summary>
            <param name="side">Order side</param>
            <param name="symbol">Currency symbol for order</param>
            <param name="orderType">Order type</param>
            <param name="timeInForce">Time in force for order</param>
            <param name="qty">Order quantity of perpetual contracts to buy or sell</param>
            <param name="price">Order price of perpetual contracts to buy or sell.</param>
            <param name="takeProfit">Order take profit (TP) price</param>
            <param name="stopLoss">Order stop loss (SL) price </param>
            <param name="reduceOnly">Reduce only</param>
            <param name="closeOnTrigger">Closing trigger.  When creating a closing order, it is highly recommended to set as true to avoid failing by insufficient available margin.</param>
            <param name="orderLinkId">Custom order identifier.</param>
            <param name="trailingStop">Order trailing stop (TS) units.</param>
            <remarks>As of 20190117 ByBit only support order quantity in an integer.</remarks>
            <returns><see cref="T:CryptoLadder.Model.OrderResBase"/> object.</returns>
        </member>
        <member name="M:CryptoLadder.Api.OrderCreate.ProcessRestResponce(RestSharp.IRestResponse)">
            <summary>Process the JSON rest response.</summary>
            <param name="localVarResponse">JSON rest response.</param>
            <returns><see cref="T:CryptoLadder.Client.ApiResponse`1"/> object.</returns>
        </member>
        <member name="T:CryptoLadder.BusinessLogic.AppNet">
            <summary>Application network.</summary>
        </member>
        <member name="P:CryptoLadder.BusinessLogic.AppNet.TestNet">
            <summary>Use the Test-net network.</summary>
        </member>
        <member name="T:CryptoLadder.BusinessLogic.AppSettings">
            <summary>Application settings.</summary>
        </member>
        <member name="P:CryptoLadder.BusinessLogic.AppSettings.ApiKey">
            <summary>User identification API key.</summary>
        </member>
        <member name="P:CryptoLadder.BusinessLogic.AppSettings.Sign">
            <summary>User identification signature key.</summary>
        </member>
        <member name="T:CryptoLadder.BusinessLogic.IAppSettings">
            <summary>Application settings interface.</summary>
        </member>
        <member name="P:CryptoLadder.BusinessLogic.IAppSettings.ApiKey">
            <summary>User identification API key.</summary>
        </member>
        <member name="P:CryptoLadder.BusinessLogic.IAppSettings.Sign">
            <summary>User identification signature key.</summary>
        </member>
        <member name="T:CryptoLadder.BusinessLogic.Ladder">
            <summary>Laddering business logic.</summary>
        </member>
        <member name="P:CryptoLadder.BusinessLogic.Ladder.LinearGradient">
            <summary>Linear gradient.</summary>
        </member>
        <member name="M:CryptoLadder.BusinessLogic.Ladder.Calculate(System.Double,System.Double,System.Int32)">
            <summary>Calculate the ladder rungs.</summary>
            <param name="startPrice">Ladder start price.</param>
            <param name="endPrice">Ladder end price.</param>
            <param name="rungs">Number of rungs in a ladder.</param>
            <returns>The price gap between ladder rungs.</returns>
        </member>
        <member name="M:CryptoLadder.BusinessLogic.Ladder.Linear(System.Double,System.Double,System.Int32,System.Int32)">
            <summary>Linear gradient ladder.</summary>
            <returns>List of <see cref="T:CryptoLadder.Model.LinearRungs"/> detailing the price and quantity for each ladder rung.</returns>
        </member>
        <member name="T:CryptoLadder.BusinessLogic.PriceReader">
            <summary>Read from the console the starting or ending price for the ladder.</summary>
        </member>
        <member name="M:CryptoLadder.BusinessLogic.PriceReader.Get(System.Boolean)">
            <summary>Get the price.</summary>
            <param name="startingPrice"></param>
            <returns>The price.</returns>
        </member>
        <member name="T:CryptoLadder.BusinessLogic.QuantityReader">
            <summary>Read from the console the quantity for the ladder.</summary>
        </member>
        <member name="M:CryptoLadder.BusinessLogic.QuantityReader.Get(System.Int32)">
            <summary>Get the total unit quantity for the order.</summary>
            <param name="rungs">The number of rungs in the ladder.</param>
            <returns>Order quantity.</returns>
        </member>
        <member name="T:CryptoLadder.BusinessLogic.RungsReader">
            <summary>Read from the console the number of rungs in the order ladder.</summary>
        </member>
        <member name="M:CryptoLadder.BusinessLogic.RungsReader.Get">
            <summary>Get the number of rungs.</summary>
            <returns>The number of ladder rungs.</returns>
        </member>
        <member name="T:CryptoLadder.BusinessLogic.SymbolReader">
            <summary>Read from the console the currency symbol for the order.</summary>
        </member>
        <member name="M:CryptoLadder.BusinessLogic.SymbolReader.Get">
            <summary>Get the order currency symbol.</summary>
            <returns>The <see cref="T:CryptoLadder.Definitions.SymbolEnum"/></returns>
        </member>
        <member name="T:CryptoLadder.Client.ApiClient">
            <summary>API client is mainly responsible for making the HTTP call to the API back-end.</summary>
        </member>
        <member name="M:CryptoLadder.Client.ApiClient.#ctor">
            <summary>Initializes a new instance of the <see cref="T:CryptoLadder.Client.ApiClient" /> class with default configuration.</summary>
        </member>
        <member name="M:CryptoLadder.Client.ApiClient.#ctor(CryptoLadder.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:CryptoLadder.Client.ApiClient" /> class
            with default base path (https://api-testnet.bybit.com).
            </summary>
            <param name="config">An instance of Configuration.</param>
        </member>
        <member name="M:CryptoLadder.Client.ApiClient.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CryptoLadder.Client.ApiClient" /> class
            with default configuration.
            </summary>
            <param name="basePath">The base path.</param>
        </member>
        <member name="P:CryptoLadder.Client.ApiClient.Configuration">
            <summary>Gets or sets an instance of the IReadableConfiguration.</summary>
            <value>An instance of the IReadableConfiguration.</value>
            <remarks><see cref="T:CryptoLadder.Client.IReadableConfiguration"/> helps us to avoid modifying possibly global configuration values from within a given client. It does not guarantee thread-safety of the <see cref="P:CryptoLadder.Client.ApiClient.Configuration"/> instance in any way.</remarks>
        </member>
        <member name="P:CryptoLadder.Client.ApiClient.RestClient">
            <summary>Gets or sets the RestClient.</summary>
            <value>An instance of the RestClient</value>
        </member>
        <member name="M:CryptoLadder.Client.ApiClient.CallApi(System.String,RestSharp.Method,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,RestSharp.FileParameter},System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>Makes the HTTP request (Sync).</summary>
            <param name="path">URL path.</param>
            <param name="method">HTTP method.</param>
            <param name="queryParams">Query parameters.</param>
            <param name="postBody">HTTP body (POST request).</param>
            <param name="headerParams">Header parameters.</param>
            <param name="formParams">Form parameters.</param>
            <param name="fileParams">File parameters.</param>
            <param name="pathParams">Path parameters.</param>
            <param name="contentType">Content Type of the request</param>
            <returns>Object</returns>
        </member>
        <member name="M:CryptoLadder.Client.ApiClient.CallApiAsync(System.String,RestSharp.Method,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,RestSharp.FileParameter},System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>Makes the asynchronous HTTP request.</summary>
            <param name="path">URL path.</param>
            <param name="method">HTTP method.</param>
            <param name="queryParams">Query parameters.</param>
            <param name="postBody">HTTP body (POST request).</param>
            <param name="headerParams">Header parameters.</param>
            <param name="formParams">Form parameters.</param>
            <param name="fileParams">File parameters.</param>
            <param name="pathParams">Path parameters.</param>
            <param name="contentType">Content type.</param>
            <returns>The Task instance.</returns>
        </member>
        <member name="M:CryptoLadder.Client.ApiClient.ParameterToString(System.Object)">
            <summary>
            If parameter is DateTime, output in a formatted string (default ISO 8601), customizable with Configuration.DateTime.
            If parameter is a list, join the list with ",".
            Otherwise just return the string.
            </summary>
            <param name="obj">The parameter (header, path, query, form).</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="M:CryptoLadder.Client.ApiClient.Deserialize(RestSharp.IRestResponse,System.Type)">
            <summary>De-serialize the JSON string into a proper object.</summary>
            <param name="response">The HTTP response.</param>
            <param name="type">Object type.</param>
            <returns>Object representation of the JSON string.</returns>
        </member>
        <member name="M:CryptoLadder.Client.ApiClient.IsJsonMime(System.String)">
             <summary>Check if the given MIME is a JSON MIME.
            JSON MIME examples:
                application/json
                application/json; charset=UTF8
                APPLICATION/JSON
                application/vnd.company+json
             </summary>
             <param name="mime">MIME</param>
             <returns>Returns True if MIME type is json.</returns>
        </member>
        <member name="M:CryptoLadder.Client.ApiClient.SelectHeaderContentType(System.String[])">
            <summary>
            Select the Content-Type header's value from the given content-type array:
            if JSON type exists in the given array, use it;
            otherwise use the first one defined in 'consumes'
            </summary>
            <param name="contentTypes">The Content-Type array to select from.</param>
            <returns>The Content-Type header to use.</returns>
        </member>
        <member name="M:CryptoLadder.Client.ApiClient.SelectHeaderAccept(System.String[])">
            <summary>Select the Accept header's value from the given accepts array: if JSON exists in the given array, use it; otherwise use all of them (joining into a string)</summary>
            <param name="accepts">The accepts array to select from.</param>
            <returns>The Accept header to use.</returns>
        </member>
        <member name="M:CryptoLadder.Client.ApiClient.ConvertType(System.Object,System.Type)">
            <summary>Dynamically cast the object into target type.</summary>
            <param name="fromObject">Object to be casted</param>
            <param name="toObject">Target type</param>
            <returns>Casted object</returns>
        </member>
        <member name="M:CryptoLadder.Client.ApiClient.SanitizeFilename(System.String)">
            <summary>Sanitize filename by removing the path</summary>
            <param name="filename">Filename</param>
            <returns>Filename</returns>
        </member>
        <member name="M:CryptoLadder.Client.ApiClient.ParameterToKeyValuePairs(System.String,System.String,System.Object)">
            <summary>Convert parameters to key/value pairs. Use collectionFormat to properly format lists and collections.</summary>
            <param name="collectionFormat">Collection format</param>
            <param name="name">Key name.</param>
            <param name="value">Value object.</param>
            <returns>A list of KeyValuePairs</returns>
        </member>
        <member name="M:CryptoLadder.Client.ApiClient.IsCollection(System.Object)">
            <summary>Check if generic object is a collection.</summary>
            <param name="value"></param>
            <returns>True if object is a collection type</returns>
        </member>
        <member name="T:CryptoLadder.Client.ApiException">
            <summary>
            API Exception
            </summary>
        </member>
        <member name="P:CryptoLadder.Client.ApiException.ErrorCode">
            <summary>
            Gets or sets the error code (HTTP status code)
            </summary>
            <value>The error code (HTTP status code).</value>
        </member>
        <member name="P:CryptoLadder.Client.ApiException.ErrorContent">
            <summary>
            Gets or sets the error content (body json object)
            </summary>
            <value>The error content (Http response body).</value>
        </member>
        <member name="M:CryptoLadder.Client.ApiException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CryptoLadder.Client.ApiException"/> class.
            </summary>
        </member>
        <member name="M:CryptoLadder.Client.ApiException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CryptoLadder.Client.ApiException"/> class.
            </summary>
            <param name="errorCode">HTTP status code.</param>
            <param name="message">Error message.</param>
        </member>
        <member name="M:CryptoLadder.Client.ApiException.#ctor(System.Int32,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:CryptoLadder.Client.ApiException"/> class.
            </summary>
            <param name="errorCode">HTTP status code.</param>
            <param name="message">Error message.</param>
            <param name="errorContent">Error content.</param>
        </member>
        <member name="T:CryptoLadder.Client.ApiResponse`1">
            <summary>
            API Response
            </summary>
        </member>
        <member name="P:CryptoLadder.Client.ApiResponse`1.StatusCode">
            <summary>
            Gets or sets the status code (HTTP status code)
            </summary>
            <value>The status code.</value>
        </member>
        <member name="P:CryptoLadder.Client.ApiResponse`1.Headers">
            <summary>
            Gets or sets the HTTP headers
            </summary>
            <value>HTTP headers</value>
        </member>
        <member name="P:CryptoLadder.Client.ApiResponse`1.Data">
            <summary>
            Gets or sets the data (parsed HTTP body)
            </summary>
            <value>The data.</value>
        </member>
        <member name="M:CryptoLadder.Client.ApiResponse`1.#ctor(System.Int32,System.Collections.Generic.IDictionary{System.String,System.String},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:CryptoLadder.Client.ApiResponse`1" /> class.
            </summary>
            <param name="statusCode">HTTP status code.</param>
            <param name="headers">HTTP headers.</param>
            <param name="data">Data (parsed HTTP body)</param>
        </member>
        <member name="T:CryptoLadder.Client.Configuration">
            <summary>Represents a set of configuration settings</summary>
        </member>
        <member name="F:CryptoLadder.Client.Configuration.Version">
            <summary>Version of the package.</summary>
            <value>Version of the package.</value>
        </member>
        <member name="F:CryptoLadder.Client.Configuration.ISO8601_DATETIME_FORMAT">
            <summary>Identifier for ISO 8601 DateTime Format</summary>
            <remarks>See https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8 for more information.</remarks>
        </member>
        <member name="F:CryptoLadder.Client.Configuration._apiKey">
            <summary>Gets or sets the API key based on the authentication name.</summary>
            <value>The API key.</value>
        </member>
        <member name="F:CryptoLadder.Client.Configuration._apiKeyPrefix">
            <summary>Gets or sets the prefix (e.g. Token) of the API key based on the authentication name.</summary>
            <value>The prefix of the API key.</value>
        </member>
        <member name="F:CryptoLadder.Client.Configuration.DefaultExceptionFactory">
            <summary>
            Default creation of exceptions for a given method name and response object
            </summary>
        </member>
        <member name="P:CryptoLadder.Client.Configuration.Default">
            <summary>Gets or sets the default Configuration.</summary>
            <value>Configuration.</value>
        </member>
        <member name="M:CryptoLadder.Client.Configuration.#ctor">
            <summary>Initializes a new instance of the <see cref="T:CryptoLadder.Client.Configuration" /> class</summary>
        </member>
        <member name="M:CryptoLadder.Client.Configuration.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>Initializes a new instance of the <see cref="T:CryptoLadder.Client.Configuration" /> class</summary>
        </member>
        <member name="P:CryptoLadder.Client.Configuration.ApiClient">
            <summary>Gets an instance of an ApiClient for this configuration</summary>
        </member>
        <member name="P:CryptoLadder.Client.Configuration.BasePath">
            <summary>Gets or sets the base path for API access.</summary>
        </member>
        <member name="P:CryptoLadder.Client.Configuration.DefaultHeader">
            <summary>Gets or sets the default header.</summary>
        </member>
        <member name="P:CryptoLadder.Client.Configuration.Timeout">
            <summary>Gets or sets the HTTP timeout (milliseconds) of ApiClient. Default to 100000 milliseconds.</summary>
        </member>
        <member name="P:CryptoLadder.Client.Configuration.UserAgent">
            <summary>Gets or sets the HTTP user agent.</summary>
            <value>HTTP user agent.</value>
        </member>
        <member name="P:CryptoLadder.Client.Configuration.Username">
            <summary>Gets or sets the user name (HTTP basic authentication).</summary>
            <value>The user name.</value>
        </member>
        <member name="P:CryptoLadder.Client.Configuration.Password">
            <summary>Gets or sets the password (HTTP basic authentication).</summary>
            <value>The password.</value>
        </member>
        <member name="M:CryptoLadder.Client.Configuration.GetApiKeyWithPrefix(System.String)">
            <summary>Gets the API key with prefix.</summary>
            <param name="apiKeyIdentifier">API key identifier (authentication scheme).</param>
            <returns>API key with prefix.</returns>
        </member>
        <member name="P:CryptoLadder.Client.Configuration.AccessToken">
            <summary>Gets or sets the access token for OAuth2 authentication.</summary>
            <value>The access token.</value>
        </member>
        <member name="P:CryptoLadder.Client.Configuration.TempFolderPath">
            <summary>Gets or sets the temporary folder path to store the files downloaded from the server.</summary>
            <value>Folder path.</value>
        </member>
        <member name="P:CryptoLadder.Client.Configuration.DateTimeFormat">
            <summary>
            Gets or sets the date time format used when serializing in the ApiClient
            By default, it's set to ISO 8601 - "o", for others see:
            https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx
            and https://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx
            No validation is done to ensure that the string you're providing is valid
            </summary>
            <value>The DateTimeFormat string</value>
        </member>
        <member name="P:CryptoLadder.Client.Configuration.ApiKeyPrefix">
            <summary>
            Gets or sets the prefix (e.g. Token) of the API key based on the authentication name.
            </summary>
            <value>The prefix of the API key.</value>
        </member>
        <member name="P:CryptoLadder.Client.Configuration.ApiKey">
            <summary>
            Gets or sets the API key based on the authentication name.
            </summary>
            <value>The API key.</value>
        </member>
        <member name="M:CryptoLadder.Client.Configuration.CreateApiClient">
            <summary>
            Creates a new <see cref="P:CryptoLadder.Client.Configuration.ApiClient" /> based on this <see cref="T:CryptoLadder.Client.Configuration" /> instance.
            </summary>
            <returns>The <see cref="P:CryptoLadder.Client.Configuration.ApiClient"/> object.</returns>
        </member>
        <member name="T:CryptoLadder.Client.ExceptionFactory">
            <summary>A delegate to ExceptionFactory method.</summary>
            <param name="methodName">Method name</param>
            <param name="response">Response</param>
            <returns>Exceptions</returns>
        </member>
        <member name="T:CryptoLadder.Client.GlobalConfiguration">
            <summary><see cref="T:CryptoLadder.Client.GlobalConfiguration"/> provides a compile-time extension point for globally configuring API Clients.</summary>
            <remarks>A customized implementation via partial class may reside in another file and may be excluded from automatic generation.</remarks>
        </member>
        <member name="T:CryptoLadder.Client.IReadableConfiguration">
            <summary>
            Represents a readable-only configuration contract.
            </summary>
        </member>
        <member name="P:CryptoLadder.Client.IReadableConfiguration.AccessToken">
            <summary>
            Gets the access token.
            </summary>
            <value>Access token.</value>
        </member>
        <member name="P:CryptoLadder.Client.IReadableConfiguration.ApiKey">
            <summary>
            Gets the API key.
            </summary>
            <value>API key.</value>
        </member>
        <member name="P:CryptoLadder.Client.IReadableConfiguration.ApiKeyPrefix">
            <summary>
            Gets the API key prefix.
            </summary>
            <value>API key prefix.</value>
        </member>
        <member name="P:CryptoLadder.Client.IReadableConfiguration.BasePath">
            <summary>
            Gets the base path.
            </summary>
            <value>Base path.</value>
        </member>
        <member name="P:CryptoLadder.Client.IReadableConfiguration.DateTimeFormat">
            <summary>
            Gets the date time format.
            </summary>
            <value>Date time foramt.</value>
        </member>
        <member name="P:CryptoLadder.Client.IReadableConfiguration.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <value>Default header.</value>
        </member>
        <member name="P:CryptoLadder.Client.IReadableConfiguration.TempFolderPath">
            <summary>
            Gets the temp folder path.
            </summary>
            <value>Temp folder path.</value>
        </member>
        <member name="P:CryptoLadder.Client.IReadableConfiguration.Timeout">
            <summary>
            Gets the HTTP connection timeout (in milliseconds)
            </summary>
            <value>HTTP connection timeout.</value>
        </member>
        <member name="P:CryptoLadder.Client.IReadableConfiguration.UserAgent">
            <summary>
            Gets the user agent.
            </summary>
            <value>User agent.</value>
        </member>
        <member name="P:CryptoLadder.Client.IReadableConfiguration.Username">
            <summary>
            Gets the username.
            </summary>
            <value>Username.</value>
        </member>
        <member name="P:CryptoLadder.Client.IReadableConfiguration.Password">
            <summary>
            Gets the password.
            </summary>
            <value>Password.</value>
        </member>
        <member name="M:CryptoLadder.Client.IReadableConfiguration.GetApiKeyWithPrefix(System.String)">
            <summary>
            Gets the API key with prefix.
            </summary>
            <param name="apiKeyIdentifier">API key identifier (authentication scheme).</param>
            <returns>API key with prefix.</returns>
        </member>
        <member name="T:CryptoLadder.Client.Signature">
            <summary>Creating an encryption signature.</summary>
        </member>
        <member name="M:CryptoLadder.Client.Signature.Create(System.String,System.String)">
            <summary>Create a signature.</summary>
            <param name="secret">Secret key.</param>
            <param name="message">Message to encrypt.</param>
            <returns>Encrypted message.</returns>
        </member>
        <member name="T:CryptoLadder.Definitions.CurrencyEnum">
            <summary>Currency enumeration.</summary>
        </member>
        <member name="F:CryptoLadder.Definitions.CurrencyEnum.BTC">
            <summary>BitCoin (BTC)</summary>
        </member>
        <member name="F:CryptoLadder.Definitions.CurrencyEnum.ETH">
            <summary>Etherium (ETH)</summary>
        </member>
        <member name="F:CryptoLadder.Definitions.CurrencyEnum.EOS">
            <summary>EOS</summary>
        </member>
        <member name="F:CryptoLadder.Definitions.CurrencyEnum.XRP">
            <summary>XRP</summary>
        </member>
        <member name="T:CryptoLadder.Definitions.OrderStatusEnum">
            <summary>Order status enumeration.</summary>
        </member>
        <member name="F:CryptoLadder.Definitions.OrderStatusEnum.Created">
            <summary>Created</summary>
        </member>
        <member name="F:CryptoLadder.Definitions.OrderStatusEnum.New">
            <summary>New</summary>
        </member>
        <member name="F:CryptoLadder.Definitions.OrderStatusEnum.PartiallyFilled">
            <summary>Partially filled</summary>
        </member>
        <member name="F:CryptoLadder.Definitions.OrderStatusEnum.Filled">
            <summary>Filled</summary>
        </member>
        <member name="F:CryptoLadder.Definitions.OrderStatusEnum.Cancelled">
            <summary>Canceled</summary>
        </member>
        <member name="F:CryptoLadder.Definitions.OrderStatusEnum.Rejected">
            <summary>Rejected</summary>
        </member>
        <member name="F:CryptoLadder.Definitions.OrderStatusEnum.PendingCancel">
            <summary>Pending cancel</summary>
            <remarks>The matching engine has received the cancellation but there is no guarantee that it will be successful.</remarks>
        </member>
        <member name="F:CryptoLadder.Definitions.OrderStatusEnum.Deactivated">
            <summary>Deactivated.</summary>
            <remarks>The conditional order was canceled before triggering.</remarks>
        </member>
        <member name="T:CryptoLadder.Definitions.OrderTypeEnum">
            <summary>Order type enumeration.</summary>
        </member>
        <member name="F:CryptoLadder.Definitions.OrderTypeEnum.Limit">
            <summary>Limit order</summary>
            <remarks>Setting of an execution price for the other.  Only when last traded price r4eaches the order price, will the system fulfill the order.</remarks>
        </member>
        <member name="F:CryptoLadder.Definitions.OrderTypeEnum.Market">
            <summary>Market order</summary>
            <remarks>A traditional market price order, will be filled at the best available price.  "Price" can be set to be "" if and only if you are placing a market price order.</remarks>
        </member>
        <member name="T:CryptoLadder.Definitions.SideEnum">
            <summary>Order side enumeration.</summary>
        </member>
        <member name="F:CryptoLadder.Definitions.SideEnum.Buy">
            <summary>Buy side (LONG).</summary>
        </member>
        <member name="F:CryptoLadder.Definitions.SideEnum.Sell">
            <summary>Sell side (SHORT).</summary>
        </member>
        <member name="T:CryptoLadder.Definitions.SymbolEnum">
            <summary>Currency symbol enumeration.</summary>
        </member>
        <member name="F:CryptoLadder.Definitions.SymbolEnum.BTCUSD">
            <summary>BTC with a matching pairing of USD.</summary>
        </member>
        <member name="F:CryptoLadder.Definitions.SymbolEnum.ETHUSD">
            <summary>ETH with a matching pairing of USD.</summary>
        </member>
        <member name="F:CryptoLadder.Definitions.SymbolEnum.EOSUSD">
            <summary>EOS with a matching pairing of USD.</summary>
        </member>
        <member name="F:CryptoLadder.Definitions.SymbolEnum.XRPUSD">
            <summary>XRP with a matching pairing of USD.</summary>
        </member>
        <member name="T:CryptoLadder.Definitions.TimeInForceEnum">
            <summary>Time in force enumeration.</summary>
        </member>
        <member name="F:CryptoLadder.Definitions.TimeInForceEnum.GoodTillCancel">
            <summary>Good until cancel (GTC).</summary>
            <remarks>Order remains effective indefinitely until fully executed unless cancellation is made.</remarks>
        </member>
        <member name="F:CryptoLadder.Definitions.TimeInForceEnum.ImmediateOrcancel">
            <summary>Immediate or cancel (IOC).</summary>
            <remarks>Order that must be filled immediately at the limit price or better only.  if the order cannot be filled immediately or fully, the unfilled portion will be canceled.</remarks>
        </member>
        <member name="F:CryptoLadder.Definitions.TimeInForceEnum.FillOrKill">
            <summary>Fill or kill (FOC)</summary>
            <remarks>Order must be immediately filled in its entirety at the limit price or better; otherwise, it will be totally canceled.  No partial fills are allowed.</remarks>
        </member>
        <member name="F:CryptoLadder.Definitions.TimeInForceEnum.PostOnly">
            <summary>Post only (POO)</summary>
            <remarks>Strictly ensure that limit orders will be placed into the order book and therefore receive a maker rebate then it is ultimately executed.</remarks>
        </member>
        <member name="T:CryptoLadder.Definitions.TriggerPriceTypeEnum">
            <summary>Trigger by price enumeration.</summary>
        </member>
        <member name="F:CryptoLadder.Definitions.TriggerPriceTypeEnum.LastPrice">
            <summary>ByBit's current market price (LTP).</summary>
            <remarks>The Last Traded Price is always anchored to the spot price using the funding mechanism.</remarks>
        </member>
        <member name="F:CryptoLadder.Definitions.TriggerPriceTypeEnum.IndexPrice">
            <summary>ByBit's Index Price (ISP).</summary>
            <remarks>A calculation of the Spot Price from the respective reference exchange.</remarks>
        </member>
        <member name="F:CryptoLadder.Definitions.TriggerPriceTypeEnum.MarkPrice">
            <summary>ByBit's Mark Price (MP)</summary>
            <remarks>A global spot price index plus a decaying funding basis rate.  Mark price can be considered as a price that reflects the real-time spot price on the major exchanges.</remarks>
        </member>
        <member name="T:CryptoLadder.Definitions.WalletFundTypeEnum">
            <summary>Wallet funding type enumeration.</summary>
        </member>
        <member name="F:CryptoLadder.Definitions.WalletFundTypeEnum.Deposit">
            <summary>Deposit</summary>
        </member>
        <member name="F:CryptoLadder.Definitions.WalletFundTypeEnum.Withdraw">
            <summary>Withdraw</summary>
        </member>
        <member name="F:CryptoLadder.Definitions.WalletFundTypeEnum.RealisedPNL">
            <summary>Realised Profit and Loss</summary>
        </member>
        <member name="F:CryptoLadder.Definitions.WalletFundTypeEnum.Commission">
            <summary>Commission</summary>
        </member>
        <member name="F:CryptoLadder.Definitions.WalletFundTypeEnum.Refund">
            <summary>Refund</summary>
        </member>
        <member name="F:CryptoLadder.Definitions.WalletFundTypeEnum.Prize">
            <summary>Prize</summary>
        </member>
        <member name="F:CryptoLadder.Definitions.WalletFundTypeEnum.ExchangeOrderWithdraw">
            <summary>Exchange order withdraw</summary>
        </member>
        <member name="F:CryptoLadder.Definitions.WalletFundTypeEnum.ExchangeOrderDeposit">
            <summary>Exchange order deposit</summary>
        </member>
        <member name="T:CryptoLadder.Definitions.WithdrawStatusEnum">
            <summary>Withdraw status enumeration.</summary>
        </member>
        <member name="F:CryptoLadder.Definitions.WithdrawStatusEnum.TobeConfirmed">
            <summary>To be confirmed.</summary>
        </member>
        <member name="F:CryptoLadder.Definitions.WithdrawStatusEnum.UnderReview">
            <summary>Under review.</summary>
        </member>
        <member name="F:CryptoLadder.Definitions.WithdrawStatusEnum.Pending">
            <summary>Pending transfer</summary>
        </member>
        <member name="F:CryptoLadder.Definitions.WithdrawStatusEnum.Success">
            <summary>Success</summary>
        </member>
        <member name="F:CryptoLadder.Definitions.WithdrawStatusEnum.CancelByUser">
            <summary>Canceled by user.</summary>
        </member>
        <member name="F:CryptoLadder.Definitions.WithdrawStatusEnum.Reject">
            <summary>Rejected.</summary>
        </member>
        <member name="F:CryptoLadder.Definitions.WithdrawStatusEnum.Expire">
            <summary>Expired.</summary>
        </member>
        <member name="T:CryptoLadder.Model.APIKeyBase">
            <summary>
            Get bybit server time.
            </summary>
        </member>
        <member name="M:CryptoLadder.Model.APIKeyBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CryptoLadder.Model.APIKeyBase" /> class.
            </summary>
        </member>
        <member name="M:CryptoLadder.Model.APIKeyBase.#ctor(System.Nullable{System.Decimal},System.String,System.String,System.String,System.Collections.Generic.List{CryptoLadder.Model.APIKeyInfo},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CryptoLadder.Model.APIKeyBase" /> class.
            </summary>
            <param name="retCode">retCode.</param>
            <param name="retMsg">retMsg.</param>
            <param name="extCode">extCode.</param>
            <param name="extInfo">extInfo.</param>
            <param name="result">result.</param>
            <param name="timeNow">timeNow.</param>
        </member>
        <member name="P:CryptoLadder.Model.APIKeyBase.RetCode">
            <summary>
            Gets or Sets RetCode
            </summary>
        </member>
        <member name="P:CryptoLadder.Model.APIKeyBase.RetMsg">
            <summary>
            Gets or Sets RetMsg
            </summary>
        </member>
        <member name="P:CryptoLadder.Model.APIKeyBase.ExtCode">
            <summary>
            Gets or Sets ExtCode
            </summary>
        </member>
        <member name="P:CryptoLadder.Model.APIKeyBase.ExtInfo">
            <summary>
            Gets or Sets ExtInfo
            </summary>
        </member>
        <member name="P:CryptoLadder.Model.APIKeyBase.Result">
            <summary>
            Gets or Sets Result
            </summary>
        </member>
        <member name="P:CryptoLadder.Model.APIKeyBase.TimeNow">
            <summary>
            Gets or Sets TimeNow
            </summary>
        </member>
        <member name="M:CryptoLadder.Model.APIKeyBase.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:CryptoLadder.Model.APIKeyBase.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:CryptoLadder.Model.APIKeyBase.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:CryptoLadder.Model.APIKeyBase.Equals(CryptoLadder.Model.APIKeyBase)">
            <summary>
            Returns true if APIKeyBase instances are equal
            </summary>
            <param name="input">Instance of APIKeyBase to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:CryptoLadder.Model.APIKeyBase.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:CryptoLadder.Model.APIKeyBase.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:CryptoLadder.Model.APIKeyInfo">
            <summary>
            Get bybit server time.
            </summary>
        </member>
        <member name="M:CryptoLadder.Model.APIKeyInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CryptoLadder.Model.APIKeyInfo" /> class.
            </summary>
        </member>
        <member name="M:CryptoLadder.Model.APIKeyInfo.#ctor(System.String,System.Nullable{System.Decimal},System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.List{System.String},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:CryptoLadder.Model.APIKeyInfo" /> class.
            </summary>
            <param name="apiKey">apiKey.</param>
            <param name="userId">userId.</param>
            <param name="ips">ips.</param>
            <param name="note">note.</param>
            <param name="permissions">permissions.</param>
            <param name="createdAt">createdAt.</param>
            <param name="readOnly">readOnly.</param>
        </member>
        <member name="P:CryptoLadder.Model.APIKeyInfo.ApiKey">
            <summary>
            Gets or Sets ApiKey
            </summary>
        </member>
        <member name="P:CryptoLadder.Model.APIKeyInfo.UserId">
            <summary>
            Gets or Sets UserId
            </summary>
        </member>
        <member name="P:CryptoLadder.Model.APIKeyInfo.Ips">
            <summary>
            Gets or Sets Ips
            </summary>
        </member>
        <member name="P:CryptoLadder.Model.APIKeyInfo.Note">
            <summary>
            Gets or Sets Note
            </summary>
        </member>
        <member name="P:CryptoLadder.Model.APIKeyInfo.Permissions">
            <summary>
            Gets or Sets Permissions
            </summary>
        </member>
        <member name="P:CryptoLadder.Model.APIKeyInfo.CreatedAt">
            <summary>
            Gets or Sets CreatedAt
            </summary>
        </member>
        <member name="P:CryptoLadder.Model.APIKeyInfo.ReadOnly">
            <summary>
            Gets or Sets ReadOnly
            </summary>
        </member>
        <member name="M:CryptoLadder.Model.APIKeyInfo.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:CryptoLadder.Model.APIKeyInfo.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:CryptoLadder.Model.APIKeyInfo.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:CryptoLadder.Model.APIKeyInfo.Equals(CryptoLadder.Model.APIKeyInfo)">
            <summary>
            Returns true if APIKeyInfo instances are equal
            </summary>
            <param name="input">Instance of APIKeyInfo to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:CryptoLadder.Model.APIKeyInfo.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:CryptoLadder.Model.APIKeyInfo.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:CryptoLadder.Model.LinearRungs">
            <summary>Linear ladder order rungs.</summary>
        </member>
        <member name="P:CryptoLadder.Model.LinearRungs.Quantity">
            <summary>Order quantity for rung.</summary>
        </member>
        <member name="P:CryptoLadder.Model.LinearRungs.Price">
            <summary>Order price for rung.</summary>
        </member>
        <member name="T:CryptoLadder.Model.OrderRes">
            <summary>
            Place new order response
            </summary>
        </member>
        <member name="M:CryptoLadder.Model.OrderRes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CryptoLadder.Model.OrderRes" /> class.
            </summary>
        </member>
        <member name="M:CryptoLadder.Model.OrderRes.#ctor(System.String,System.Nullable{System.Decimal},System.String,System.String,System.String,System.Nullable{System.Double},System.Int32,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Double},System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CryptoLadder.Model.OrderRes" /> class.
            </summary>
            <param name="orderId">orderId.</param>
            <param name="userId">userId.</param>
            <param name="symbol">symbol.</param>
            <param name="side">side.</param>
            <param name="orderType">orderType.</param>
            <param name="price">price.</param>
            <param name="qty">qty.</param>
            <param name="timeInForce">timeInForce.</param>
            <param name="orderStatus">orderStatus.</param>
            <param name="lastExecTime">lastExecTime.</param>
            <param name="lastExecPrice">lastExecPrice.</param>
            <param name="leavesQty">leavesQty.</param>
            <param name="cumExecQty">cumExecQty.</param>
            <param name="cumExecValue">cumExecValue.</param>
            <param name="cumExecFee">cumExecFee.</param>
            <param name="rejectReason">rejectReason.</param>
            <param name="orderLinkId">orderLinkId.</param>
            <param name="createdAt">createdAt.</param>
            <param name="updatedAt">updatedAt.</param>
        </member>
        <member name="P:CryptoLadder.Model.OrderRes.OrderId">
            <summary>
            Gets or Sets OrderId
            </summary>
        </member>
        <member name="P:CryptoLadder.Model.OrderRes.UserId">
            <summary>
            Gets or Sets UserId
            </summary>
        </member>
        <member name="P:CryptoLadder.Model.OrderRes.Symbol">
            <summary>
            Gets or Sets Symbol
            </summary>
        </member>
        <member name="P:CryptoLadder.Model.OrderRes.Side">
            <summary>
            Gets or Sets Side
            </summary>
        </member>
        <member name="P:CryptoLadder.Model.OrderRes.OrderType">
            <summary>
            Gets or Sets OrderType
            </summary>
        </member>
        <member name="P:CryptoLadder.Model.OrderRes.Price">
            <summary>
            Gets or Sets Price
            </summary>
        </member>
        <member name="P:CryptoLadder.Model.OrderRes.Qty">
            <summary>
            Gets or Sets Qty
            </summary>
        </member>
        <member name="P:CryptoLadder.Model.OrderRes.TimeInForce">
            <summary>
            Gets or Sets TimeInForce
            </summary>
        </member>
        <member name="P:CryptoLadder.Model.OrderRes.OrderStatus">
            <summary>
            Gets or Sets OrderStatus
            </summary>
        </member>
        <member name="P:CryptoLadder.Model.OrderRes.LastExecTime">
            <summary>
            Gets or Sets LastExecTime
            </summary>
        </member>
        <member name="P:CryptoLadder.Model.OrderRes.LastExecPrice">
            <summary>
            Gets or Sets LastExecPrice
            </summary>
        </member>
        <member name="P:CryptoLadder.Model.OrderRes.LeavesQty">
            <summary>
            Gets or Sets LeavesQty
            </summary>
        </member>
        <member name="P:CryptoLadder.Model.OrderRes.CumExecQty">
            <summary>
            Gets or Sets CumExecQty
            </summary>
        </member>
        <member name="P:CryptoLadder.Model.OrderRes.CumExecValue">
            <summary>
            Gets or Sets CumExecValue
            </summary>
        </member>
        <member name="P:CryptoLadder.Model.OrderRes.CumExecFee">
            <summary>
            Gets or Sets CumExecFee
            </summary>
        </member>
        <member name="P:CryptoLadder.Model.OrderRes.RejectReason">
            <summary>
            Gets or Sets RejectReason
            </summary>
        </member>
        <member name="P:CryptoLadder.Model.OrderRes.OrderLinkId">
            <summary>
            Gets or Sets OrderLinkId
            </summary>
        </member>
        <member name="P:CryptoLadder.Model.OrderRes.CreatedAt">
            <summary>
            Gets or Sets CreatedAt
            </summary>
        </member>
        <member name="P:CryptoLadder.Model.OrderRes.UpdatedAt">
            <summary>
            Gets or Sets UpdatedAt
            </summary>
        </member>
        <member name="M:CryptoLadder.Model.OrderRes.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:CryptoLadder.Model.OrderRes.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:CryptoLadder.Model.OrderRes.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:CryptoLadder.Model.OrderRes.Equals(CryptoLadder.Model.OrderRes)">
            <summary>
            Returns true if OrderRes instances are equal
            </summary>
            <param name="input">Instance of OrderRes to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:CryptoLadder.Model.OrderRes.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:CryptoLadder.Model.OrderRes.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:CryptoLadder.Model.OrderResBase">
            <summary>
            Place new order response
            </summary>
        </member>
        <member name="M:CryptoLadder.Model.OrderResBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CryptoLadder.Model.OrderResBase" /> class.
            </summary>
        </member>
        <member name="M:CryptoLadder.Model.OrderResBase.#ctor(System.Nullable{System.Decimal},System.String,System.String,System.String,CryptoLadder.Model.OrderRes,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CryptoLadder.Model.OrderResBase" /> class.
            </summary>
            <param name="retCode">retCode.</param>
            <param name="retMsg">retMsg.</param>
            <param name="extCode">extCode.</param>
            <param name="extInfo">extInfo.</param>
            <param name="result">result.</param>
            <param name="timeNow">timeNow.</param>
        </member>
        <member name="P:CryptoLadder.Model.OrderResBase.RetCode">
            <summary>
            Gets or Sets RetCode
            </summary>
        </member>
        <member name="P:CryptoLadder.Model.OrderResBase.RetMsg">
            <summary>
            Gets or Sets RetMsg
            </summary>
        </member>
        <member name="P:CryptoLadder.Model.OrderResBase.ExtCode">
            <summary>
            Gets or Sets ExtCode
            </summary>
        </member>
        <member name="P:CryptoLadder.Model.OrderResBase.ExtInfo">
            <summary>
            Gets or Sets ExtInfo
            </summary>
        </member>
        <member name="P:CryptoLadder.Model.OrderResBase.Result">
            <summary>
            Gets or Sets Result
            </summary>
        </member>
        <member name="P:CryptoLadder.Model.OrderResBase.TimeNow">
            <summary>
            Gets or Sets TimeNow
            </summary>
        </member>
        <member name="M:CryptoLadder.Model.OrderResBase.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:CryptoLadder.Model.OrderResBase.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:CryptoLadder.Model.OrderResBase.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:CryptoLadder.Model.OrderResBase.Equals(CryptoLadder.Model.OrderResBase)">
            <summary>
            Returns true if OrderResBase instances are equal
            </summary>
            <param name="input">Instance of OrderResBase to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:CryptoLadder.Model.OrderResBase.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:CryptoLadder.Model.OrderResBase.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
    </members>
</doc>
